// Generated by psc-bundle 0.11.4
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var result = [];
      var n = 0;
      for (var i = 0, l = fs.length; i < l; i++) {
        for (var j = 0, k = xs.length; j < k; j++) {
          result[n++] = fs[i](xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["Semigroupoid"] = Semigroupoid;
  exports["compose"] = compose;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };                                                                                             
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  }; 
  var ifM = function (dictBind) {
      return function (cond) {
          return function (t) {
              return function (f) {
                  return bind(dictBind)(cond)(function (cond$prime) {
                      if (cond$prime) {
                          return t;
                      };
                      return f;
                  });
              };
          };
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["ifM"] = ifM;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["forE"] = $foreign.forE;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s), 
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
    "use strict";

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };                                
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["ordInt"] = ordInt;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 220, column 1 - line 220, column 22: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["fromMaybe"] = fromMaybe;
  exports["maybe"] = maybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  exports["Newtype"] = Newtype;
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["concatMap"] = concatMap;
  exports["filter"] = $foreign.filter;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;  

  exports.pi = Math.PI;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["floor"] = $foreign.floor;
  exports["pi"] = $foreign.pi;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 63, column 1 - line 68, column 43: " + [ x.constructor.name ]);
  };
  var floor = function ($3) {
      return unsafeClamp($$Math.floor($3));
  };
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var width = 340.0;
  var height = (width * 16.0) / 9.0;
  var blockSize = 32.0;
  var ballSize = 12.0;
  exports["ballSize"] = ballSize;
  exports["blockSize"] = blockSize;
  exports["height"] = height;
  exports["width"] = width;
})(PS["Globals"] = PS["Globals"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.fill = function(ctx) {
      return function() {
          ctx.fill();
          return ctx;
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.arc = function(ctx) {
      return function(a) {
          return function() {
              ctx.arc(a.x, a.y, a.r, a.start, a.end);
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["arc"] = $foreign.arc;
  exports["beginPath"] = $foreign.beginPath;
  exports["closePath"] = $foreign.closePath;
  exports["fill"] = $foreign.fill;
  exports["fillRect"] = $foreign.fillRect;
  exports["fillText"] = $foreign.fillText;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setFont"] = $foreign.setFont;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];        
  var lens = function (s2a) {
      return function (s2b2t) {
          return function (dictFunctor) {
              return function (a2fb) {
                  return function (s) {
                      return Data_Functor.map(dictFunctor)(s2b2t(s))(a2fb(s2a(s)));
                  };
              };
          };
      };
  };
  exports["lens"] = lens;
})(PS["Optic.Lens"] = PS["Optic.Lens"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Optic_Core = PS["Optic.Core"];
  var Optic_Lens = PS["Optic.Lens"];
  var Prelude = PS["Prelude"];
  var objects = function (dictFunctor) {
      return Optic_Lens.lens(function (r) {
          return r.objects;
      })(function (r) {
          return function (val) {
              var $14 = {};
              for (var $15 in r) {
                  if ({}.hasOwnProperty.call(r, $15)) {
                      $14[$15] = r[$15];
                  };
              };
              $14.objects = val;
              return $14;
          };
      })(dictFunctor);
  };
  var deltaTime = function (dictFunctor) {
      return Optic_Lens.lens(function (r) {
          return r.deltaTime;
      })(function (r) {
          return function (val) {
              var $17 = {};
              for (var $18 in r) {
                  if ({}.hasOwnProperty.call(r, $18)) {
                      $17[$18] = r[$18];
                  };
              };
              $17.deltaTime = val;
              return $17;
          };
      })(dictFunctor);
  };
  exports["deltaTime"] = deltaTime;
  exports["objects"] = objects;
})(PS["Lenses"] = PS["Lenses"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Optic_Internal_Setter = PS["Optic.Internal.Setter"];
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];
  var set = function (stab) {
      return function (b) {
          return function ($20) {
              return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(stab(function ($21) {
                  return Data_Identity.Identity(Data_Function["const"](b)($21));
              })($20));
          };
      };
  };
  var over = function (dictProfunctor) {
      return function (pstab) {
          return function (pab) {
              return function ($22) {
                  return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(pstab(Data_Profunctor.rmap(dictProfunctor)(Data_Identity.Identity)(pab))($22));
              };
          };
      };
  };
  var concat = function (dictSemigroup) {
      return function (staa) {
          return function (a) {
              return over(Data_Profunctor.profunctorFn)(staa)(Data_Function.flip(Data_Semigroup.append(dictSemigroup))(a));
          };
      };
  };
  exports["concat"] = concat;
  exports["over"] = over;
  exports["set"] = set;
})(PS["Optic.Setter"] = PS["Optic.Setter"] || {});
(function(exports) {
    "use strict";

  var elem = null;

  exports.logImpl = function(str) {
      return function(ending) {
          return function() {
              elem = elem || document.getElementById("console");
              elem.innerHTML += str + ending;
          }
      }
  }
})(PS["Util.Log"] = PS["Util.Log"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Util.Log"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var logStrLn = function (str) {
      return $foreign.logImpl(str)("\x0a");
  };
  exports["logStrLn"] = logStrLn;
})(PS["Util.Log"] = PS["Util.Log"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Tuple = PS["Data.Tuple"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Util_Log = PS["Util.Log"];        
  var Triple = (function () {
      function Triple(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Triple.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Triple(value0, value1, value2);
              };
          };
      };
      return Triple;
  })();
  var Playing = (function () {
      function Playing() {

      };
      Playing.value = new Playing();
      return Playing;
  })();
  var Block = (function () {
      function Block(value0) {
          this.value0 = value0;
      };
      Block.create = function (value0) {
          return new Block(value0);
      };
      return Block;
  })();
  var Ball = (function () {
      function Ball(value0) {
          this.value0 = value0;
      };
      Ball.create = function (value0) {
          return new Ball(value0);
      };
      return Ball;
  })();
  var Wall = (function () {
      function Wall(value0) {
          this.value0 = value0;
      };
      Wall.create = function (value0) {
          return new Wall(value0);
      };
      return Wall;
  })();
  var tupleToTriple = function (v) {
      return function (c) {
          return new Triple(v.value0, v.value1, c);
      };
  };
  exports["Block"] = Block;
  exports["Ball"] = Ball;
  exports["Wall"] = Wall;
  exports["Playing"] = Playing;
  exports["Triple"] = Triple;
  exports["tupleToTriple"] = tupleToTriple;
})(PS["Types"] = PS["Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var Coords = (function () {
      function Coords(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Coords.create = function (value0) {
          return function (value1) {
              return new Coords(value0, value1);
          };
      };
      return Coords;
  })();
  var rect = function (x) {
      return function (y) {
          return function (w) {
              return function (h) {
                  return {
                      x: x, 
                      y: y, 
                      w: w, 
                      h: h
                  };
              };
          };
      };
  };
  var intersects = function (r1) {
      return function (r2) {
          var top = r1.y + r1.h >= r2.y;
          var right = r1.x + r1.w >= r2.x;
          var left = r2.x + r2.w >= r1.x;
          var bottom = r2.y + r2.h >= r1.y;
          return top && (bottom && (left && right));
      };
  };
  var intersectsWithAngle = function (r1) {
      return function (r2) {
          if (intersects(r1)(r2)) {
              return Data_Tuple.Tuple.create(true)(new Coords($$Math.abs((r1.x + r1.w / 2.0) - (r2.x + r2.w / 2.0)), $$Math.abs((r1.y + r1.h / 2.0) - (r2.y + r2.h / 2.0))));
          };
          if (Data_Boolean.otherwise) {
              return Data_Tuple.Tuple.create(false)(new Coords(0.0, 0.0));
          };
          throw new Error("Failed pattern match at Util.Rect line 30, column 1 - line 33, column 44: " + [ r1.constructor.name, r2.constructor.name ]);
      };
  };
  exports["Coords"] = Coords;
  exports["intersects"] = intersects;
  exports["intersectsWithAngle"] = intersectsWithAngle;
  exports["rect"] = rect;
})(PS["Util.Rect"] = PS["Util.Rect"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Globals = PS["Globals"];
  var Lenses = PS["Lenses"];
  var Optic_Core = PS["Optic.Core"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Util_Log = PS["Util.Log"];
  var Util_Rect = PS["Util.Rect"];        
  var handleCollisions = function (time) {
      return function (gameRef) {
          return function (collisions) {
              var setObjectById = function (id) {
                  return function (obj) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef(gameRef)();
                          var func = function (v1) {
                              if (v1 instanceof Types.Block) {
                                  var $17 = v1.value0.id === id;
                                  if ($17) {
                                      return obj;
                                  };
                                  return new Types.Block(v1.value0);
                              };
                              if (v1 instanceof Types.Ball) {
                                  var $19 = v1.value0.id === id;
                                  if ($19) {
                                      return obj;
                                  };
                                  return new Types.Ball(v1.value0);
                              };
                              return v1;
                          };
                          var newObjs = Data_Functor.map(Data_Functor.functorArray)(func)(v.objects);
                          return Control_Monad_Eff_Ref.modifyRef(gameRef)(Optic_Setter.set(Lenses.objects(Data_Identity.functorIdentity))(newObjs))();
                      };
                  };
              };
              var handleCollision = function (v) {
                  if (v.value0 instanceof Types.Ball && v.value1 instanceof Types.Block) {
                      var newBlock = (function () {
                          var $22 = {};
                          for (var $23 in v.value1.value0) {
                              if ({}.hasOwnProperty.call(v.value1.value0, $23)) {
                                  $22[$23] = v["value1"]["value0"][$23];
                              };
                          };
                          $22.health = v.value1.value0.health - 1 | 0;
                          return $22;
                      })();
                      var newBall = (function () {
                          if (v.value2.value0 < v.value2.value1) {
                              var $25 = {};
                              for (var $26 in v.value0.value0) {
                                  if ({}.hasOwnProperty.call(v.value0.value0, $26)) {
                                      $25[$26] = v["value0"]["value0"][$26];
                                  };
                              };
                              $25.y = v.value0.value0.y - v.value0.value0.vy * time;
                              $25.x = v.value0.value0.x - v.value0.value0.vx * time;
                              $25.vy = -v.value0.value0.vy;
                              return $25;
                          };
                          if (Data_Boolean.otherwise) {
                              var $28 = {};
                              for (var $29 in v.value0.value0) {
                                  if ({}.hasOwnProperty.call(v.value0.value0, $29)) {
                                      $28[$29] = v["value0"]["value0"][$29];
                                  };
                              };
                              $28.x = v.value0.value0.x - v.value0.value0.vx * time;
                              $28.y = v.value0.value0.y - v.value0.value0.vy * time;
                              $28.vx = -v.value0.value0.vx;
                              return $28;
                          };
                          throw new Error("Failed pattern match at Handlers.Collision line 67, column 13 - line 74, column 63: " + [  ]);
                      })();
                      return function __do() {
                          setObjectById(newBall.id)(new Types.Ball(newBall))();
                          return setObjectById(newBlock.id)(new Types.Block(newBlock))();
                      };
                  };
                  if (v.value0 instanceof Types.Ball && v.value1 instanceof Types.Wall) {
                      var newBall = (function () {
                          if (v.value2.value0 / v.value1.value0.w < v.value2.value1 / v.value1.value0.h) {
                              var $38 = {};
                              for (var $39 in v.value0.value0) {
                                  if ({}.hasOwnProperty.call(v.value0.value0, $39)) {
                                      $38[$39] = v["value0"]["value0"][$39];
                                  };
                              };
                              $38.y = v.value0.value0.y - v.value0.value0.vy * time;
                              $38.x = v.value0.value0.x - v.value0.value0.vx * time;
                              $38.vy = -v.value0.value0.vy;
                              return $38;
                          };
                          if (Data_Boolean.otherwise) {
                              var $41 = {};
                              for (var $42 in v.value0.value0) {
                                  if ({}.hasOwnProperty.call(v.value0.value0, $42)) {
                                      $41[$42] = v["value0"]["value0"][$42];
                                  };
                              };
                              $41.x = v.value0.value0.x - v.value0.value0.vx * time;
                              $41.y = v.value0.value0.y - v.value0.value0.vy * time;
                              $41.vx = -v.value0.value0.vx;
                              return $41;
                          };
                          throw new Error("Failed pattern match at Handlers.Collision line 80, column 17 - line 85, column 61: " + [  ]);
                      })();
                      return setObjectById(newBall.id)(new Types.Ball(newBall));
                  };
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              };
              return Control_Monad_Eff.foreachE(collisions)(function (c) {
                  return handleCollision(c);
              });
          };
      };
  };
  var detectCollisions = function (objects) {
      var collides = function (v) {
          return function (v1) {
              return function (v2) {
                  if (v2 instanceof Types.Block) {
                      var potCol = Util_Rect.intersectsWithAngle(v)(Util_Rect.rect(v2.value0.x)(v2.value0.y)(Globals.blockSize)(Globals.blockSize));
                      if (v1.value0) {
                          return v1;
                      };
                      return Types.tupleToTriple(potCol)(v2);
                  };
                  if (v2 instanceof Types.Wall) {
                      var potCol = Util_Rect.intersectsWithAngle(v)(Util_Rect.rect(v2.value0.x)(v2.value0.y)(v2.value0.w)(v2.value0.h));
                      if (v1.value0) {
                          return v1;
                      };
                      return Types.tupleToTriple(potCol)(v2);
                  };
                  return v1;
              };
          };
      };
      var coll = function (v) {
          return function (v1) {
              if (v1 instanceof Types.Ball) {
                  var ballRect = Util_Rect.rect(v1.value0.x)(v1.value0.y)(Globals.ballSize)(Globals.ballSize);
                  var v2 = Data_Foldable.foldl(Data_Foldable.foldableArray)(collides(ballRect))(new Types.Triple(false, new Util_Rect.Coords(0.0, 0.0), new Types.Ball(v1.value0)))(v);
                  if (v2.value0) {
                      return [ new Types.Triple(new Types.Ball(v1.value0), v2.value2, v2.value1) ];
                  };
                  return [  ];
              };
              return [  ];
          };
      };
      return Data_Array.concatMap(coll(objects))(objects);
  };
  var checkCollisions = function (time) {
      return function (gameRef) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.readRef(gameRef)();
              var collisions = detectCollisions(v.objects);
              return handleCollisions(time)(gameRef)(collisions)();
          };
      };
  };
  exports["checkCollisions"] = checkCollisions;
  exports["detectCollisions"] = detectCollisions;
  exports["handleCollisions"] = handleCollisions;
})(PS["Handlers.Collision"] = PS["Handlers.Collision"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Ord = PS["Data.Ord"];
  var Lenses = PS["Lenses"];
  var Optic_Core = PS["Optic.Core"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];        
  var removeDeadObjects = function (gameRef) {
      var isDead = function (v) {
          if (v instanceof Types.Block) {
              if (v.value0.health <= 0) {
                  return [  ];
              };
              if (Data_Boolean.otherwise) {
                  return [ v ];
              };
          };
          return [ v ];
      };
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(gameRef)();
          var newObjs = Data_Array.concatMap(isDead)(v.objects);
          return Control_Monad_Eff_Ref.modifyRef(gameRef)(Optic_Setter.set(Lenses.objects(Data_Identity.functorIdentity))(newObjs))();
      };
  };
  exports["removeDeadObjects"] = removeDeadObjects;
})(PS["Handlers.Destruction"] = PS["Handlers.Destruction"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Semiring = PS["Data.Semiring"];
  var Lenses = PS["Lenses"];
  var Optic_Core = PS["Optic.Core"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];        
  var moveObj = function (v) {
      return function (v1) {
          if (v1 instanceof Types.Ball) {
              var nball = (function () {
                  var $6 = {};
                  for (var $7 in v1.value0) {
                      if ({}.hasOwnProperty.call(v1.value0, $7)) {
                          $6[$7] = v1["value0"][$7];
                      };
                  };
                  $6.x = v1.value0.x + v1.value0.vx * v;
                  $6.y = v1.value0.y + v1.value0.vy * v;
                  return $6;
              })();
              return new Types.Ball(nball);
          };
          return v1;
      };
  };
  var moveObjects = function (time) {
      return function (gameRef) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.readRef(gameRef)();
              var newObjs = Data_Functor.map(Data_Functor.functorArray)(moveObj(time))(v.objects);
              return Control_Monad_Eff_Ref.modifyRef(gameRef)(Optic_Setter.set(Lenses.objects(Data_Identity.functorIdentity))(newObjs))();
          };
      };
  };
  exports["moveObj"] = moveObj;
  exports["moveObjects"] = moveObjects;
})(PS["Handlers.Movement"] = PS["Handlers.Movement"] || {});
(function(exports) {
    "use strict";

  //module Util.Touch

  function getTouchIndex(touches, findID) {
      for (var i=0; i < touches.length; i++) {
          var id = touches[i].identifier;
          if(id == findID) {
               return i;
          }
      }
      return -1;
  }

  var mouseDown = false;

  exports.setupTouch = function (touchRef) {
      return function(GAME_WIDTH) {
          return function(GAME_HEIGHT) {
              return function() {
                  document.addEventListener("touchstart", function(evt) {
                      var touches = evt.changedTouches;
                      for (var i=0; i < touches.length; i++) {
                          touchRef.value.push({ x : (touches[i].pageX / window.innerWidth) * GAME_WIDTH
                                              , y : (touches[i].pageY / window.innerHeight) * GAME_HEIGHT
                                              , identifier : touches[i].identifier
                                              , justTouched : true });
                      }
                    
                      return false;
                  });
                  document.addEventListener("touchmove", function(evt) {
                      var touches = evt.changedTouches;
                      for (var i=0; i< touches.length; i++) {
                          var idx = getTouchIndex(touchRef.value, touches[i].identifier);
                          touchRef.value.splice(idx, 1, { x : (touches[i].pageX / window.innerWidth) * GAME_WIDTH
                                                        , y : (touches[i].pageY / window.innerHeight) * GAME_HEIGHT
                                                        , identifier : touches[i].identifier
                                                        , justTouched : false });
                      }
                    
                      return false;
                  });
                  document.addEventListener("touchend", function(evt) {
                      var touches = evt.changedTouches;
                      for (var i=0; i < touches.length; i++) {
                          var idx = getTouchIndex(touchRef.value, touches[i].identifier);
                          touchRef.value.splice(idx, 1);
                      }
                    
                      return false;
                  });
                  document.addEventListener("touchcancel", function(evt) {
                      var touches = evt.changedTouches;
                      for (var i=0; i < touches.length; i++) {
                          var idx = getTouchIndex(touchRef.value, touches[i].identifier);
                          touchRef.value.splice(idx, 1);
                      }
                    
                      return false;
                  });
                  document.addEventListener("mousedown", function(evt) {
                      mouseDown = true;
                      touchRef.value.push({ x : evt.pageX
                                          , y : evt.pageY
                                          , identifier : 100
                                          , justTouched : true });
                      return false;
                  });
                  document.addEventListener("mousemove", function(evt) {
                      if (!mouseDown) return false;
                      var idx = getTouchIndex(touchRef.value, 100);
                      touchRef.value.splice(idx, 1, { x : evt.pageX
                                                    , y : evt.pageY
                                                    , identifier : 100
                                                    , justTouched : false });
                      return false; 
                  });
                  document.addEventListener("mouseup", function(evt) {
                      mouseDown = false;
                      var idx = getTouchIndex(touchRef.value, 100);
                      touchRef.value.splice(idx, 1);
                      return false;
                  });
                  return {};
              }
          }
      }
  };
})(PS["Util.Touch"] = PS["Util.Touch"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Util.Touch"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];        
  var updateTouches = function (gameRef) {
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(gameRef)();
          var v1 = Control_Monad_Eff_Ref.readRef(v.touch)();
          var newTouches = Data_Functor.map(Data_Functor.functorArray)(function (t) {
              var $6 = {};
              for (var $7 in t) {
                  if ({}.hasOwnProperty.call(t, $7)) {
                      $6[$7] = t[$7];
                  };
              };
              $6.justTouched = false;
              return $6;
          })(v1);
          return Control_Monad_Eff_Ref.writeRef(v.touch)(newTouches)();
      };
  };
  var initialTouchState = [  ];
  var initialize = function (width) {
      return function (height) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.newRef(initialTouchState)();
              $foreign.setupTouch(v)(width)(height)();
              return v;
          };
      };
  };
  exports["initialTouchState"] = initialTouchState;
  exports["initialize"] = initialize;
  exports["updateTouches"] = updateTouches;
})(PS["Util.Touch"] = PS["Util.Touch"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGenUUID = function(_) {
      var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
          var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8);
          return v.toString(16);
      });
      return uuid;
  }
})(PS["Util.Unsafe.UUID"] = PS["Util.Unsafe.UUID"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Util.Unsafe.UUID"];
  var Prelude = PS["Prelude"];
  exports["unsafeGenUUID"] = $foreign.unsafeGenUUID;
})(PS["Util.Unsafe.UUID"] = PS["Util.Unsafe.UUID"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Handlers_Collision = PS["Handlers.Collision"];
  var Handlers_Destruction = PS["Handlers.Destruction"];
  var Handlers_Movement = PS["Handlers.Movement"];
  var Lenses = PS["Lenses"];
  var Optic_Core = PS["Optic.Core"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Util_Touch = PS["Util.Touch"];
  var Util_Unsafe_UUID = PS["Util.Unsafe.UUID"];        
  var movementAndCollision = function (time) {
      return function (gameRef) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.readRef(gameRef)();
              var numberOfCycles = Data_Ord.min(Data_Ord.ordInt)(Data_Int.floor((v.deltaTime + time) / 2.0e-3))(100);
              Control_Monad_Eff.forE(0)(numberOfCycles)(function (i) {
                  return function __do() {
                      Handlers_Movement.moveObjects(2.0e-3)(gameRef)();
                      return Handlers_Collision.checkCollisions(2.0e-3)(gameRef)();
                  };
              })();
              return Control_Monad_Eff_Ref.modifyRef(gameRef)(Optic_Setter.set(Lenses.deltaTime(Data_Identity.functorIdentity))((v.deltaTime + time) - Data_Int.toNumber(numberOfCycles) * 2.0e-3))();
          };
      };
  };
  var addBlock = function (gameRef) {
      return function __do() {
          var v = Control_Monad_Eff_Ref.readRef(gameRef)();
          var v1 = Control_Monad_Eff_Ref.readRef(v.touch)();
          return Control_Monad_Eff.foreachE(v1)(function (touch) {
              return Control_Bind.ifM(Control_Monad_Eff.bindEff)(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(touch.justTouched))((function () {
                  var nBlock = new Types.Block({
                      x: touch.x, 
                      y: touch.y, 
                      health: 100, 
                      id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
                  });
                  return Control_Monad_Eff_Ref.modifyRef(gameRef)(Optic_Setter.concat(Data_Semigroup.semigroupArray)(Lenses.objects(Data_Identity.functorIdentity))([ nBlock ]));
              })())(Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit));
          })();
      };
  };
  var update$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Types.Playing) {
                  return Control_Monad_Eff.foreachE([ addBlock, movementAndCollision(v), Handlers_Destruction.removeDeadObjects, Util_Touch.updateTouches ])(function (action) {
                      return action(v2);
                  });
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          };
      };
  };
  var update = function (time) {
      return function (gameRef) {
          return function __do() {
              var v = Control_Monad_Eff_Ref.readRef(gameRef)();
              return update$prime(time)(v.state)(gameRef)();
          };
      };
  };
  exports["update"] = update;
})(PS["Update"] = PS["Update"] || {});
(function(exports) {
    "use strict";

  exports.onKeyDown = function(callback) {
      return function() {
          document.addEventListener("keydown", function(event) {
              callback(event.which)();
          });
      }
  }

  exports.onKeyUp = function(callback) {
      return function() {
          document.addEventListener("keyup", function(event) {
              callback(event.which)();
          });
      }
  }
})(PS["Util.Keyboard"] = PS["Util.Keyboard"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Util.Keyboard"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var initialState = [  ];
  var initialize = function __do() {
      var v = Control_Monad_Eff_Ref.newRef(initialState)();
      $foreign.onKeyDown(function (code) {
          return Control_Monad_Eff_Ref.modifyRef(v)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ code ]));
      })();
      $foreign.onKeyUp(function (code) {
          return Control_Monad_Eff_Ref.modifyRef(v)(Data_Array.filter(Data_Eq.notEq(Data_Eq.eqInt)(code)));
      })();
      return v;
  };
  exports["initialState"] = initialState;
  exports["initialize"] = initialize;
})(PS["Util.Keyboard"] = PS["Util.Keyboard"] || {});
(function(exports) {
    "use strict";

  var now, delta, last;

  exports.requestAnimationFrame = function(callback) {
      return function() {
          last = last || Date.now();
          window.requestAnimationFrame(function(_) {
              now = Date.now();
              delta = (now - last) / 1000.0;
              last = now;
              callback(delta)();
          });
      }
  }
})(PS["Util.RequestAnimFrame"] = PS["Util.RequestAnimFrame"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var $foreign = PS["Util.RequestAnimFrame"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS["Util.RequestAnimFrame"] = PS["Util.RequestAnimFrame"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Globals = PS["Globals"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];        
  var viewObj = function (ctx) {
      return function (v) {
          if (v instanceof Types.Ball) {
              var hbSize = Globals.ballSize / 2.0;
              return function __do() {
                  var v1 = Graphics_Canvas.setFillStyle("red")(ctx)();
                  var v2 = Graphics_Canvas.beginPath(ctx)();
                  var v3 = Graphics_Canvas.arc(ctx)({
                      x: $$Math.floor(v.value0.x + hbSize), 
                      y: $$Math.floor(v.value0.y + hbSize), 
                      r: hbSize, 
                      start: 0.0, 
                      end: 2.0 * $$Math.pi
                  })();
                  var v4 = Graphics_Canvas.closePath(ctx)();
                  var v5 = Graphics_Canvas.fill(ctx)();
                  return Data_Unit.unit;
              };
          };
          if (v instanceof Types.Block) {
              return function __do() {
                  var v1 = Graphics_Canvas.setFillStyle("green")(ctx)();
                  var v2 = Graphics_Canvas.fillRect(ctx)({
                      x: v.value0.x, 
                      y: v.value0.y, 
                      w: Globals.blockSize, 
                      h: Globals.blockSize
                  })();
                  var v3 = Graphics_Canvas.setFillStyle("black")(ctx)();
                  var v4 = Graphics_Canvas.fillText(ctx)(Data_Show.show(Data_Show.showInt)(v.value0.health))(v.value0.x + 8.0)(v.value0.y + 20.0)();
                  return Data_Unit.unit;
              };
          };
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
  };
  var setupView = function (canvasName) {
      return function (width) {
          return function (height) {
              return function __do() {
                  var v = Graphics_Canvas.getCanvasElementById(canvasName)();
                  var __unused = function (dictPartial1) {
                      return function ($dollar24) {
                          return $dollar24;
                      };
                  };
                  return __unused()((function () {
                      if (v instanceof Data_Maybe.Just) {
                          return function __do() {
                              var v1 = Graphics_Canvas.getContext2D(v.value0)();
                              var v2 = Graphics_Canvas.setCanvasWidth(width)(v.value0)();
                              var v3 = Graphics_Canvas.setCanvasHeight(height)(v.value0)();
                              var v4 = Graphics_Canvas.setFont("12pt Consolas")(v1)();
                              return new Data_Tuple.Tuple(v.value0, v1);
                          };
                      };
                      throw new Error("Failed pattern match at View line 66, column 5 - line 66, column 53: " + [ v.constructor.name ]);
                  })())();
              };
          };
      };
  };
  var clearScreen = function (ctx) {
      return function (color) {
          return function __do() {
              var v = Graphics_Canvas.setFillStyle(color)(ctx)();
              var v1 = Graphics_Canvas.fillRect(ctx)({
                  x: 0.0, 
                  y: 0.0, 
                  w: Globals.width, 
                  h: Globals.height
              })();
              return Data_Unit.unit;
          };
      };
  };
  var view$prime = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Types.Playing) {
                  return function __do() {
                      clearScreen(v)("#1f1f1f")();
                      var v3 = Control_Monad_Eff_Ref.readRef(v2.touch)();
                      Control_Monad_Eff.foreachE(v3)(function (t) {
                          return function __do() {
                              var v4 = Graphics_Canvas.setFillStyle("white")(v)();
                              var v5 = Graphics_Canvas.fillRect(v)({
                                  x: t.x, 
                                  y: t.y, 
                                  w: 10.0, 
                                  h: 10.0
                              })();
                              return Data_Unit.unit;
                          };
                      })();
                      return Control_Monad_Eff.foreachE(v2.objects)(viewObj(v))();
                  };
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          };
      };
  };
  var view = function (ctx) {
      return function (game) {
          return view$prime(ctx)(game.state)(game);
      };
  };
  exports["setupView"] = setupView;
  exports["view"] = view;
})(PS["View"] = PS["View"] || {});
(function(exports) {
  // Generated by purs version 0.11.4
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Globals = PS["Globals"];
  var Prelude = PS["Prelude"];
  var Types = PS["Types"];
  var Update = PS["Update"];
  var Util_Keyboard = PS["Util.Keyboard"];
  var Util_Log = PS["Util.Log"];
  var Util_RequestAnimFrame = PS["Util.RequestAnimFrame"];
  var Util_Touch = PS["Util.Touch"];
  var Util_Unsafe_UUID = PS["Util.Unsafe.UUID"];
  var View = PS["View"];        
  var initial = function __do() {
      var v = Util_Keyboard.initialize();
      var v1 = Util_Touch.initialize(Globals.width)(Globals.height)();
      var initialState = {
          state: Types.Playing.value, 
          objects: [ new Types.Wall({
              x: -20.0, 
              y: -20.0, 
              w: 20.0, 
              h: Globals.height + 40.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Wall({
              x: -20.0, 
              y: -20.0, 
              w: Globals.width + 40.0, 
              h: 20.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Wall({
              x: Globals.width, 
              y: -20.0, 
              w: 20.0, 
              h: Globals.height + 40.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Wall({
              x: -20.0, 
              y: Globals.height, 
              w: Globals.width + 40.0, 
              h: 20.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Ball({
              x: 0.0, 
              y: 0.0, 
              vx: 300.0, 
              vy: 300.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Ball({
              x: 200.0, 
              y: 0.0, 
              vx: -200.0, 
              vy: 250.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Ball({
              x: 108.0, 
              y: 300.0, 
              vx: 240.0, 
              vy: -500.0, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Block({
              x: 100.0, 
              y: 75.0, 
              health: 2, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }), new Types.Block({
              x: 50.0, 
              y: 125.0, 
              health: 1, 
              id: Util_Unsafe_UUID.unsafeGenUUID(Data_Unit.unit)
          }) ], 
          keyboard: v, 
          touch: v1, 
          deltaTime: 0.0
      };
      var v2 = Control_Monad_Eff_Ref.newRef(initialState)();
      return v2;
  };
  var main = function __do() {
      Util_Log.logStrLn("Loading...")();
      var v = View.setupView("gameCanvas")(Globals.width)(Globals.height)();
      var v1 = initial();
      var loop = function (time) {
          return function __do() {
              Update.update(time)(v1)();
              var v2 = Control_Monad_Eff_Ref.readRef(v1)();
              View.view(v.value1)(v2)();
              return Util_RequestAnimFrame.requestAnimationFrame(loop)();
          };
      };
      Util_Log.logStrLn("Starting the loop")();
      return Util_RequestAnimFrame.requestAnimationFrame(loop)();
  };
  exports["initial"] = initial;
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
